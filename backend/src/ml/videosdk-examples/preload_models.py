#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π TTS –∏ STT.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –º–æ–¥–µ–ª–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à.
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def preload_tts_model():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å (F5-TTS)...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from main2 import ESpeechTTS
        import torch
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = "cuda" if torch.cuda.is_available() else "cpu"
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        tts = ESpeechTTS(device=device)
        await tts.load()
        
        logger.info("‚úÖ TTS –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ TTS –º–æ–¥–µ–ª–∏: {e}")
        return False

async def preload_stt_pipeline():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º STT –ø–∞–π–ø–ª–∞–π–Ω"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º STT –ø–∞–π–ø–ª–∞–π–Ω (tone)...")
        
        from main2 import StreamingTranscriber
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        transcriber = StreamingTranscriber()
        await transcriber._ensure_pipeline_loaded()
        
        logger.info("‚úÖ STT –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ STT –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False

async def download_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ Hugging Face Hub"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ Hugging Face Hub...")
        
        from huggingface_hub import hf_hub_download
        
        # TTS –º–æ–¥–µ–ª—å
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º F5-TTS –º–æ–¥–µ–ª—å...")
        model_path = hf_hub_download(
            repo_id="ESpeech/ESpeech-TTS-1_RL-V2", 
            filename="espeech_tts_rlv2.pt"
        )
        vocab_path = hf_hub_download(
            repo_id="ESpeech/ESpeech-TTS-1_RL-V2", 
            filename="vocab.txt"
        )
        logger.info(f"‚úÖ F5-TTS –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
        
        # Turn Detector –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        try:
            from videosdk.plugins.turn_detector import pre_download_model
            pre_download_model()
            logger.info("‚úÖ Turn Detector –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Turn Detector: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π...")
    
    success_count = 0
    total_count = 3
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π
    if await download_models():
        success_count += 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º STT –ø–∞–π–ø–ª–∞–π–Ω
    if await preload_stt_pipeline():
        success_count += 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å
    if await preload_tts_model():
        success_count += 1
    
    logger.info(f"üéØ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_count} –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        logger.info("üéâ –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –¢–µ–ø–µ—Ä—å main2.py –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ.")
        return 0
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
